(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{194:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"gerrit-使用流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gerrit-使用流程","aria-hidden":"true"}},[e._v("#")]),e._v(" Gerrit 使用流程")]),e._v(" "),s("h2",{attrs:{id:"gerrit-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gerrit-简介","aria-hidden":"true"}},[e._v("#")]),e._v(" gerrit 简介")]),e._v(" "),s("p",[e._v("Gerrit，一种免费、开放源代码的代码审查软件，使用网页界面。利用网页浏览器，同一个团队的软件程序员，可以相互审阅彼此修改后的程序代码，决定是否能够提交，退回或者继续修改。它使用Git作为底层版本控制系统。它分支自Rietveld，作者为Google公司的Shawn Pearce，原先是为了管理Android计划而产生。这个软件的名称，来自于荷兰设计师赫里特·里特费尔德（Gerrit Rietveld）。最早它是由Python写成，在第二版后，改成用Java与SQL。使用Google Web Toolkit来产生前端的JavaScript。")]),e._v(" "),s("h2",{attrs:{id:"使用-docker-安装-gerrit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-docker-安装-gerrit","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 docker 安装 gerrit")]),e._v(" "),s("p",[e._v("作者比较廊，安装部署是个麻烦有碰运气的时，有了 docker 这个神器后，妈妈在也不担心部署环境问题了。do\n关于 docker 的使用不在本话题之内，这里只列出一些操作步骤。")]),e._v(" "),s("h3",{attrs:{id:"_1-pull-docker-镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-pull-docker-镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. pull docker 镜像")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker pull gerritforge/gerrit-ubuntu15.04\n")])])]),s("h3",{attrs:{id:"_2-启动-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动-docker","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 启动 docker")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run -d -p 80:8080 -p 29418 29418 gerritforge/gerrit-ubuntu15.04\n")])])]),s("p",[e._v("注意：端口映射，需要映射 29418 端口，gerrit ssh 需要用到，同时 8080 端口为 gerrit web 的端口映射为 80 端口，当然 80 端口不能被占用，护着映射为其他端口。")]),e._v(" "),s("h2",{attrs:{id:"注册账户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注册账户","aria-hidden":"true"}},[e._v("#")]),e._v(" 注册账户")]),e._v(" "),s("p",[e._v("登录部署好的 gerrit 主页，注册账户：")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://7xjcd4.com1.z0.glb.clouddn.com/gerrit_register.png",alt:"gerrit_register"}})]),e._v(" "),s("p",[e._v("根据要求填写账户信息，特别注意下面两项：")]),e._v(" "),s("h3",{attrs:{id:"_1-ssh-key（ssh-认证方式用到）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-ssh-key（ssh-认证方式用到）","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. ssh key（ssh 认证方式用到）")]),e._v(" "),s("p",[e._v("gerrit 提交时使用 ssh 协议提交代码，一次需要设置 ssh key 信息。首先，生词 ssh key:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/lo_core$ ssh-keygen -C aqcoder\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/aqcoder/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/aqcoder/.ssh/id_rsa.\nYour public key has been saved in /home/aqcoder/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:LVcg70Rw4DVSVOE3o1OLkknLBD9NCi7TLYdrl2BOjLA aqcoder\nThe key's randomart image is:\n+---[RSA 2048]----+\n|    .   B=O.+.   |\n|     o * & B     |\n|    E + @ @ + =  |\n|       * % B = + |\n|        S % + .  |\n|       . + . .   |\n|                 |\n|                 |\n|                 |\n+----[SHA256]-----+\n\n")])])]),s("p",[e._v("这里不需要设置密码，一路回车即可。")]),e._v(" "),s("p",[e._v("将 id_rsa.pub 的内容复制到刚才注册页面的 ssh key 中。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/lo_core$ cat ~/.ssh/id_rsa.pub\n")])])]),s("h3",{attrs:{id:"_2-设置-server-host-key（ssh-认证方式用到）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置-server-host-key（ssh-认证方式用到）","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 设置 Server Host Key（ssh 认证方式用到）")]),e._v(" "),s("p",[e._v("将注册页面中最下方的 Server Host Key 添加到 ~/.ssh/known_hosts 末尾")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("echo [复制的内容] >> ~/.ssh/known_hosts\n")])])]),s("h3",{attrs:{id:"_3-设置-ssh-config-ssh-认证方式用到"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置-ssh-config-ssh-认证方式用到","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. 设置 ssh config(ssh 认证方式用到)")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("vim ~/.ssh/config\n\nHost gerrit 127.0.0.1\n    IdentityFile ~/.ssh/id_rsa\n    User aqcoder\n    Port 29418\n    HostName 127.0.0.1\n")])])]),s("h3",{attrs:{id:"_4-生成-http-密码-http-认证方式用到"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-生成-http-密码-http-认证方式用到","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. 生成 http 密码(http 认证方式用到)")]),e._v(" "),s("p",[e._v("点击 HTTP Password --\x3e Create Password 按钮。")]),e._v(" "),s("h2",{attrs:{id:"创建项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建项目","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建项目")]),e._v(" "),s("p",[e._v("现在我们开始创建一个空的项目。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://7xjcd4.com1.z0.glb.clouddn.com/gerrit_createproj.png",alt:"gerrit_createproj"}})]),e._v(" "),s("p",[e._v("设置项目发送邮件 stmp:")]),e._v(" "),s("p",[e._v("点击 project --\x3e list --\x3e  lo_coer --\x3e Edit Config")]),e._v(" "),s("p",[e._v("根据你的邮箱，追加一下内容:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[sendemail]\n        enable = true\n        smtpServer = smtp.gmail.com\n        smtpServerPort = 465\n        smtpEncryption = ssl\n        smtpUser = your_account@gmail..com\n        smtpPass = your_password\n        sslVerify = false\n        from = Code Review < your_account@gmail..com>\n")])])]),s("h2",{attrs:{id:"克隆项目并修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆项目并修改","aria-hidden":"true"}},[e._v("#")]),e._v(" 克隆项目并修改")]),e._v(" "),s("p",[e._v("将刚才创建的项目克隆岛本地：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code$ sudo git clone http://127.0.0.1/lo_core\nCloning into 'lo_core'...\nremote: Counting objects: 2, done\nremote: Finding sources: 100% (2/2)\nremote: Total 2 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (2/2), done.\nChecking connectivity... done.\n\n")])])]),s("p",[e._v("为了演示效果，我们在这里就添加一个 test 文件，在实际项目中添加您要管理的代码。当然也可以使用命令来直接添加已经在 git 管理下的本地仓库同时创建项目。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('aqcoder@ubuntu:~/code/lo_core$ touch test\naqcoder@ubuntu:~/code/lo_core$ git add .\naqcoder@ubuntu:~/code/lo_core$ git commit -m"test"\n')])])]),s("h2",{attrs:{id:"提交修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交修改","aria-hidden":"true"}},[e._v("#")]),e._v(" 提交修改")]),e._v(" "),s("h3",{attrs:{id:"_1-git-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-config","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. git config")]),e._v(" "),s("p",[e._v("注意：提交者必须和 geriit 注册的邮箱一致")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("git config user.name aqcoder\ngit config user.email flw.aquarius@gmail.com\n")])])]),s("h3",{attrs:{id:"_2-设置-commit-分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置-commit-分支","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 设置 commit 分支")]),e._v(" "),s("p",[e._v("gerrit 不允许用户直接向 master 分支直接 push 代码，只能想 push 到分支，然后经过 review 以后再合并，这个也是 review 的精髓所在。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/lo_core$ git config remote.origin.push refs/heads/*:refs/for/*\n")])])]),s("h3",{attrs:{id:"_3-设置-commit-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置-commit-hook","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. 设置 commit hook")]),e._v(" "),s("p",[e._v("gerrit 中使用 change-id 做为一个 patch 的提交，也就说当你在修改一个 bug 或完成一个功能时，可能有多次的提交，但是他们应该使用一个 change-id。这使得提交历史干净明了，易于撤销 patch。因此，在每次提交时需要使用 hook 生成 chang-id,当需要往这个 patch 进行第二次提交时使用 "),s("code",[e._v("git --amend")]),e._v(" 再次提交。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/lo_core$ gitdir=$(git rev-parse --git-dir); scp -p -P 29418 aqcoder@127.0.0.1:hooks/commit-msg ${gitdir}/hooks/\ncommit-msg                                    100% 4662     4.6KB/s   00:00\n")])])]),s("h3",{attrs:{id:"_4-push-到-gerrit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-push-到-gerrit","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. push 到 gerrit")]),e._v(" "),s("p",[e._v("由于上面的提交我们没有 change-d 因此，在这里在进行一次提交操作。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/lo_core$ git commit --amend\n[master 0e0fc03] test\n Date: Sun Apr 10 19:20:45 2016 +0800\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 test\n")])])]),s("p",[e._v("现在可以 push 了（push  的时候有 http 和 ssh 两种认证方式，这里使用了 http 的方式，两种方式说明详见下面 push 认证方式）。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/lo_core$ git push\nUsername for 'http://127.0.0.1': aqcoder\nPassword for 'http://127.0.0.1':\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 275 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: Processing changes: new: 1, refs: 1, done\nremote:\nremote: New Changes:\nremote:   http://bcad5a346f31:8080/34 test\nremote:\nTo http://gerrit.zysoft.com/lo_core\n * [new branch]      master -> refs/for/master\n\n")])])]),s("p",[e._v("提交成功，现在登录 grrit，可以看到你的修改了：")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://7xjcd4.com1.z0.glb.clouddn.com/gerrit_push.png",alt:"gerrit_push"}})]),e._v(" "),s("h3",{attrs:{id:"_5-push-认证方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-push-认证方式","aria-hidden":"true"}},[e._v("#")]),e._v(" 5. push 认证方式")]),e._v(" "),s("p",[e._v("两种的设置在我们的上面的注册步骤已经完成了。")]),e._v(" "),s("ol",[s("li",[e._v("http 的认证方式理解起来比较简单，通过用户名密码认证。 使用注册步骤中生成的密码即可通过验证。")])]),e._v(" "),s("p",[e._v("gerrit 的 HTTP 密码不能修改，每次输入比较麻烦。可以设置 git 缓存此密码："),s("code",[e._v("git config --global credential.helper store")]),e._v("\n2. ssh 方式验证。注册步骤我们已经完成了公钥秘钥的设置，现在还需要设置 push url")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("git remote set-url origin ssh://127.0.0.1/lo_core\n")])])]),s("p",[e._v("如果 push 的时候出现 Permission Denied")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/lo_core$ git push\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n")])])]),s("p",[e._v("尝试执行")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("aqcoder@ubuntu:~/code/test$ ssh-add ~/.ssh/id_rsa\nIdentity added: /home/aqcoder/.ssh/id_rsa (/homeaqcoder/.ssh/id_rsa)\n")])])]),s("h2",{attrs:{id:"code-review"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code-review","aria-hidden":"true"}},[e._v("#")]),e._v(" code review")]),e._v(" "),s("p",[e._v("登录管理员账户，找到刚才的提交。进行代码审核，审核通过后，点击 review, merge patch 到 master。这样一次代码审核就完成了。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://7xjcd4.com1.z0.glb.clouddn.com/gerrit_review.png",alt:"gerrit_review"}})])])}],!1,null,null,null);t.default=r.exports}}]);