(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{204:function(t,a,e){"use strict";e.r(a);var v=e(0),n=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"如何选择一个适合自己的开源项目来阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何选择一个适合自己的开源项目来阅读","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何选择一个适合自己的开源项目来阅读")]),t._v(" "),e("p",[t._v("人们都说， 阅读源码是提高编程水平的一个极好的方法， 但是如何找到一个适合自己阅读的源码， 就蛋疼的很。 优秀的开源项目非常多， 肯定是看不完的。 而且如果没有一个明确的目的， 只是因为火就看， 则事倍功半。")]),t._v(" "),e("p",[t._v("我更像一个后台开发程序员， 所以以下观点都基于后台程序员的视角出发。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://dn-linuxcn.qbox.me/data/attachment/album/201509/09/000836x7ea2f7bef8hwaei.jpg",alt:"title"}})]),t._v(" "),e("h2",{attrs:{id:"从-node-js-和-tornado-出发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从-node-js-和-tornado-出发","aria-hidden":"true"}},[t._v("#")]),t._v(" 从 Node.js 和 Tornado 出发")]),t._v(" "),e("p",[t._v("Tornado 是一个异步非阻塞服务器应用与轻量级 Web 框架的结合体。 Node.js 则是一个开源跨平台的运行环境(runtime environment)。 在我看来， Node.js 基本上就是一个服务器应用了， 因为这一部分和 Tornado 的服务器部分几乎是一模一样。")]),t._v(" "),e("p",[t._v("我们的问题主要是应该选择什么样的开源代码来阅读， 目前为止， 我们可以选择的项目有 Tornado 和 Node.js 了。 先不着急做出决定， 继续向深处探索一番。 首先化简问题， 因为 Node.js 的优势并非仅仅是异步非阻塞提供的高性能， 还有很多其他的东西， 我们暂时不管那些其他的部分。")]),t._v(" "),e("ul",[e("li",[t._v("Tornado = AIO Server + Web Framework")]),t._v(" "),e("li",[t._v("Node.js = AIO Server")])]),t._v(" "),e("p",[t._v("如果学习过操作系统， 就会知道 Linux 下这两个程序之所以达到如此高性能的效果， 归功于 Linux 2。6 Kernel 提供的 epoll。 我的思路是， Node.js 如果在 Linux 下运行， 一定会调用操作系统提供的 epoll; 如果在 Windows 下运行， 一定会调用操作系统提供的 IOCP。")]),t._v(" "),e("p",[t._v("顺着这个思路， 我发现了 libuv 和 pyuv 这两个开源项目。")]),t._v(" "),e("ul",[e("li",[t._v("libuv: 一般认为， libuv 是因 nodejs 而生。 libuv 的作用是对用户隐藏操作系统的差异， 封装 Linux 的 libev 和 windows 的 IOCP 等等， 提供跨平台的异步操作库。")]),t._v(" "),e("li",[t._v("pyuv:　给 Python 提供一个调用 libuv 的接口")])]),t._v(" "),e("h2",{attrs:{id:"屡清关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#屡清关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 屡清关系")]),t._v(" "),e("p",[t._v("上面提到了 nodejs， tornado， libuv， pyuv， libev， IOCP 这些概念(项目)， 他们中大部分都可以找到开源代码， 如果想要从中选择出合适自己学习的项目， 最好的办法是先缕清他们的关系。")]),t._v(" "),e("p",[t._v("首先， Tornado 和 Node.js 都可以用来做网站后台服务器应用。 而 Tornado 更是提供了一个 Web 框架。")]),t._v(" "),e("p",[t._v("Tornado 的 Web 框架提供了视图和路由功能， 利用这一点我们可以很容易写出一个 MVC 模式的 Web 应用。 对于 Web 框架来说， 他直接从服务器应用拿到用户的 request， 处理完毕后得到一个 response， 直接给回服务器就可以了， 是不需要了解 request 如何传输过来以及 response 如何返回给用户的细节的。\n"),e("img",{attrs:{src:"https://dn-linuxcn.qbox.me/data/attachment/album/201509/09/000841bn49yqnsuy494zyq.png",alt:"relation"}})]),t._v(" "),e("p",[t._v("由于同时会有很多客户端向服务器发起请求， 服务器要尽快处理这些请求， 提高性能一般是让 cpu 在单位时间里面尽量可以处理更多的 I/O 请求， 方法一般就是采用阻塞的多线程， 或者非阻塞的单线程(当然也可以多线程或者多进程)。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://dn-linuxcn.qbox.me/data/attachment/album/201509/09/000845mzd4eo60xoa01dno.png",alt:"relation"}})]),t._v(" "),e("p",[t._v("无论是采用哪一种 I/O 模型， 都要有操作系统的支持， 如果 CPU 没有中断功能， 操作系统就没有锁的功能， 也就没有信号量， 没有 Monitor 等一系列同步机制。")]),t._v(" "),e("p",[t._v("对于 Tornado 来说， Python 解释器提供了上述一系列的同步机制。 因此 Tornado 到底能用什么样的 I/O 模型， 直接取决于 Python 解释器。")]),t._v(" "),e("p",[t._v("而 Python 解释器是运行在操作系统之上， 如果操作系统不提供锁， 那么解释器也无法做出一把锁。 因此 Tornado 到底能用什么样的 I/O 模型， 间接取决于操作系统。")]),t._v(" "),e("p",[t._v("我想 Node.js 也是一样的道理。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://dn-linuxcn.qbox.me/data/attachment/album/201509/09/000850ttj3j5tlz35b33xt.png",alt:"relation"}})]),t._v(" "),e("h2",{attrs:{id:"得出结论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#得出结论","aria-hidden":"true"}},[t._v("#")]),t._v(" 得出结论")]),t._v(" "),e("ul",[e("li",[t._v("如果想知道一个网站的框架是如何将路由， 视图(html， css， js 之类)， 数据处理拼在一起的， 那么可以阅读 Tornado 源码中的 Web 框架部分。")]),t._v(" "),e("li",[t._v("如果想知道同时有很多很多的 request 到来， 服务器应用是如何利用操作系统提供的接口来完成高并发处理的， 可以阅读 Tornado 的服务器部分或者 Node.js 的源码")]),t._v(" "),e("li",[t._v("如果想知道， 不同的操作系统提供了不同的接口， 如何在这个基础上构建出一个跨平台的统一接口， 可以阅读 libuv 的源码")]),t._v(" "),e("li",[t._v("如果想知道在 Linux 操作系统下， 到底是如何实现这些 I/O 接口的， 可以阅读 libev 的源码")]),t._v(" "),e("li",[t._v("如果想知道如何利用 libuv， 在 Python 下也可以调用跨平台 I/O 接口， 可以阅读 pyuv 的源码")])]),t._v(" "),e("p",[t._v("不仅如此， 我们由结论还可以知道更多: 如果想看 libuv 的源码， 知道 libuv 是如何实现的， 首先得会用它。 只有知道它的作用， 看起源码来才有一个目的性。 要想知道如何使用 libuv， 得参考其上面一层的 Tornado 源码中的很小一部分， 或者查阅 libuv 的文档。")]),t._v(" "),e("h2",{attrs:{id:"选择源码的一般方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择源码的一般方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择源码的一般方法")]),t._v(" "),e("ol",[e("li",[t._v("列出一些感兴趣的关键字")]),t._v(" "),e("li",[t._v("对关键字的上层和下层进行了解")]),t._v(" "),e("li",[t._v("梳理出整个关系图")]),t._v(" "),e("li",[t._v("得出结论， 做出选择")])]),t._v(" "),e("p",[t._v("经过刚刚几个步骤， 我们由对 Tornado 和 Node.js 的一些模糊的认识， 逐渐梳理出从用户发起请求， 到操作系统甚至硬件层面的一条比较清晰的路线。 虽然一行源码都还没看， 已经知道了我们看不同的源码， 分别能学到什么知识。 在这个基础上， 选择适合自己当前需求的源码来阅读， 就能事半功倍了。")])])}],!1,null,null,null);a.default=n.exports}}]);